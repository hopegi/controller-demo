package rtc

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// StartMPUTask invokes the rtc.StartMPUTask API synchronously
func (client *Client) StartMPUTask(request *StartMPUTaskRequest) (response *StartMPUTaskResponse, err error) {
	response = CreateStartMPUTaskResponse()
	err = client.DoAction(request, response)
	return
}

// StartMPUTaskWithChan invokes the rtc.StartMPUTask API asynchronously
func (client *Client) StartMPUTaskWithChan(request *StartMPUTaskRequest) (<-chan *StartMPUTaskResponse, <-chan error) {
	responseChan := make(chan *StartMPUTaskResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.StartMPUTask(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// StartMPUTaskWithCallback invokes the rtc.StartMPUTask API asynchronously
func (client *Client) StartMPUTaskWithCallback(request *StartMPUTaskRequest, callback func(response *StartMPUTaskResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *StartMPUTaskResponse
		var err error
		defer close(result)
		response, err = client.StartMPUTask(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// StartMPUTaskRequest is the request struct for api StartMPUTask
type StartMPUTaskRequest struct {
	*requests.RpcRequest
	PayloadType     requests.Integer         `position:"Query" name:"PayloadType"`
	UserPanes       *[]StartMPUTaskUserPanes `position:"Query" name:"UserPanes"  type:"Repeated"`
	RtpExtInfo      requests.Integer         `position:"Query" name:"RtpExtInfo"`
	BackgroundColor requests.Integer         `position:"Query" name:"BackgroundColor"`
	CropMode        requests.Integer         `position:"Query" name:"CropMode"`
	ReportVad       requests.Integer         `position:"Query" name:"ReportVad"`
	TaskProfile     string                   `position:"Query" name:"TaskProfile"`
	LayoutIds       *[]string                `position:"Query" name:"LayoutIds"  type:"Repeated"`
	TaskId          string                   `position:"Query" name:"TaskId"`
	ShowLog         string                   `position:"Query" name:"ShowLog"`
	StreamURL       string                   `position:"Query" name:"StreamURL"`
	VadInterval     requests.Integer         `position:"Query" name:"VadInterval"`
	OwnerId         requests.Integer         `position:"Query" name:"OwnerId"`
	SubSpecUsers    *[]string                `position:"Query" name:"SubSpecUsers"  type:"Repeated"`
	AppId           string                   `position:"Query" name:"AppId"`
	TimeStampRef    requests.Integer         `position:"Query" name:"TimeStampRef"`
	MediaEncode     requests.Integer         `position:"Query" name:"MediaEncode"`
	ChannelId       string                   `position:"Query" name:"ChannelId"`
}

// StartMPUTaskUserPanes is a repeated param struct in StartMPUTaskRequest
type StartMPUTaskUserPanes struct {
	PaneId     string `name:"PaneId"`
	UserId     string `name:"UserId"`
	SourceType string `name:"SourceType"`
}

// StartMPUTaskResponse is the response struct for api StartMPUTask
type StartMPUTaskResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
}

// CreateStartMPUTaskRequest creates a request to invoke StartMPUTask API
func CreateStartMPUTaskRequest() (request *StartMPUTaskRequest) {
	request = &StartMPUTaskRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("rtc", "2018-01-11", "StartMPUTask", "rtc", "openAPI")
	request.Method = requests.POST
	return
}

// CreateStartMPUTaskResponse creates a response to parse from StartMPUTask response
func CreateStartMPUTaskResponse() (response *StartMPUTaskResponse) {
	response = &StartMPUTaskResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
