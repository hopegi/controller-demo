package cloudesl

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribePlanogramEslDevices invokes the cloudesl.DescribePlanogramEslDevices API synchronously
// api document: https://help.aliyun.com/api/cloudesl/describeplanogramesldevices.html
func (client *Client) DescribePlanogramEslDevices(request *DescribePlanogramEslDevicesRequest) (response *DescribePlanogramEslDevicesResponse, err error) {
	response = CreateDescribePlanogramEslDevicesResponse()
	err = client.DoAction(request, response)
	return
}

// DescribePlanogramEslDevicesWithChan invokes the cloudesl.DescribePlanogramEslDevices API asynchronously
// api document: https://help.aliyun.com/api/cloudesl/describeplanogramesldevices.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribePlanogramEslDevicesWithChan(request *DescribePlanogramEslDevicesRequest) (<-chan *DescribePlanogramEslDevicesResponse, <-chan error) {
	responseChan := make(chan *DescribePlanogramEslDevicesResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribePlanogramEslDevices(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribePlanogramEslDevicesWithCallback invokes the cloudesl.DescribePlanogramEslDevices API asynchronously
// api document: https://help.aliyun.com/api/cloudesl/describeplanogramesldevices.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribePlanogramEslDevicesWithCallback(request *DescribePlanogramEslDevicesRequest, callback func(response *DescribePlanogramEslDevicesResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribePlanogramEslDevicesResponse
		var err error
		defer close(result)
		response, err = client.DescribePlanogramEslDevices(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribePlanogramEslDevicesRequest is the request struct for api DescribePlanogramEslDevices
type DescribePlanogramEslDevicesRequest struct {
	*requests.RpcRequest
	StoreId string           `position:"Body" name:"StoreId"`
	Layer   requests.Integer `position:"Body" name:"Layer"`
	Shelf   string           `position:"Body" name:"Shelf"`
}

// DescribePlanogramEslDevicesResponse is the response struct for api DescribePlanogramEslDevices
type DescribePlanogramEslDevicesResponse struct {
	*responses.BaseResponse
	Code                string               `json:"Code" xml:"Code"`
	DynamicCode         string               `json:"DynamicCode" xml:"DynamicCode"`
	DynamicMessage      string               `json:"DynamicMessage" xml:"DynamicMessage"`
	ErrorCode           string               `json:"ErrorCode" xml:"ErrorCode"`
	ErrorMessage        string               `json:"ErrorMessage" xml:"ErrorMessage"`
	Message             string               `json:"Message" xml:"Message"`
	RequestId           string               `json:"RequestId" xml:"RequestId"`
	Shelf               string               `json:"Shelf" xml:"Shelf"`
	StoreId             string               `json:"StoreId" xml:"StoreId"`
	Success             bool                 `json:"Success" xml:"Success"`
	EslDeviceLayerInfos []EslDeviceLayerInfo `json:"EslDeviceLayerInfos" xml:"EslDeviceLayerInfos"`
}

// CreateDescribePlanogramEslDevicesRequest creates a request to invoke DescribePlanogramEslDevices API
func CreateDescribePlanogramEslDevicesRequest() (request *DescribePlanogramEslDevicesRequest) {
	request = &DescribePlanogramEslDevicesRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("cloudesl", "2020-02-01", "DescribePlanogramEslDevices", "cloudesl", "openAPI")
	return
}

// CreateDescribePlanogramEslDevicesResponse creates a response to parse from DescribePlanogramEslDevices response
func CreateDescribePlanogramEslDevicesResponse() (response *DescribePlanogramEslDevicesResponse) {
	response = &DescribePlanogramEslDevicesResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
