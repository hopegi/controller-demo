package airec

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeRule invokes the airec.DescribeRule API synchronously
// api document: https://help.aliyun.com/api/airec/describerule.html
func (client *Client) DescribeRule(request *DescribeRuleRequest) (response *DescribeRuleResponse, err error) {
	response = CreateDescribeRuleResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeRuleWithChan invokes the airec.DescribeRule API asynchronously
// api document: https://help.aliyun.com/api/airec/describerule.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeRuleWithChan(request *DescribeRuleRequest) (<-chan *DescribeRuleResponse, <-chan error) {
	responseChan := make(chan *DescribeRuleResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeRule(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeRuleWithCallback invokes the airec.DescribeRule API asynchronously
// api document: https://help.aliyun.com/api/airec/describerule.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeRuleWithCallback(request *DescribeRuleRequest, callback func(response *DescribeRuleResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeRuleResponse
		var err error
		defer close(result)
		response, err = client.DescribeRule(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeRuleRequest is the request struct for api DescribeRule
type DescribeRuleRequest struct {
	*requests.RoaRequest
	InstanceId string `position:"Path" name:"InstanceId"`
	RuleType   string `position:"Query" name:"RuleType"`
	SceneId    string `position:"Query" name:"SceneId"`
	RuleId     string `position:"Path" name:"RuleId"`
}

// DescribeRuleResponse is the response struct for api DescribeRule
type DescribeRuleResponse struct {
	*responses.BaseResponse
	RequestId string               `json:"RequestId" xml:"RequestId"`
	Result    ResultInDescribeRule `json:"Result" xml:"Result"`
}

// CreateDescribeRuleRequest creates a request to invoke DescribeRule API
func CreateDescribeRuleRequest() (request *DescribeRuleRequest) {
	request = &DescribeRuleRequest{
		RoaRequest: &requests.RoaRequest{},
	}
	request.InitWithApiInfo("Airec", "2018-10-12", "DescribeRule", "/openapi/instances/[InstanceId]/rules/[RuleId]", "airec", "openAPI")
	request.Method = requests.GET
	return
}

// CreateDescribeRuleResponse creates a response to parse from DescribeRule response
func CreateDescribeRuleResponse() (response *DescribeRuleResponse) {
	response = &DescribeRuleResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
